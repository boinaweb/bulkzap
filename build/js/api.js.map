{"version":3,"file":"js/api.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB,WAAW,IAAI;AAC5D,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wBAAwB;AAC/D;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,kFAAkF;AACzF,OAAO,yEAAyE;AAChF,OAAO,4KAA4K;AACnL,OAAO,uIAAuI;AAC9I,OAAO,6HAA6H;AACpI,OAAO,6EAA6E;AACpF,OAAO,iLAAiL;AACxL,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qCAAqC;AAC1D,GAAG;AACH;AACA;AACA;AACA,W","sources":["webpack://boinasender/./src/js/api.js"],"sourcesContent":["ï»¿(function() {\r\n\t\r\n\t/*\r\n\tThe core scripts of the API. Currently is public through `window` but will be hidden in production mode.\r\n\t*/\r\n\twindow.Core = {\r\n\t\t\r\n\t\t/*\r\n\t\tReturns a WhatsApp GroupMetadata object from a given group id.\r\n\t\t*/\r\n\t\tgroup: function(_id) {\r\n\t\t\tlet result = null;\r\n\t\t\tStore.GroupMetadata.models.forEach(x => {\r\n\t\t\t\tif (x.hasOwnProperty(\"__x_id\") && x.__x_id == _id) {\r\n\t\t\t\t\tresult = x;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tReturns a WhatsApp Contact object from a given contact id.\r\n\t\t*/\r\n\t\tcontact: function(_id) {\r\n\t\t\tlet result = null;\r\n\t\t\tStore.Contact.models.forEach(x => {\r\n\t\t\t\tif (x.hasOwnProperty(\"__x_id\") && x.__x_id == _id) {\r\n\t\t\t\t\tresult = x;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tReturns a WhatsApp Chat object from a given chat id.\r\n\t\t*/\r\n\t\tchat: function(_id) {\r\n\t\t\tlet result = null;\r\n\t\t\tStore.Chat.models.forEach(x => {\r\n\t\t\t\tif (x.hasOwnProperty(\"__x_id\") && x.__x_id == _id) {\r\n\t\t\t\t\tresult = x;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tReturns a WhatsApp Msg object from a given serialized messsage id\r\n\t\t*/\r\n\t\tmsg: function(_id) {\r\n\t\t\tlet result = null;\r\n\t\t\tStore.Msg.models.forEach(x => {\r\n\t\t\t\tif (x.hasOwnProperty(\"__x_id\") && x.__x_id._serialized == _id) {\r\n\t\t\t\t\tresult = x;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tReturns the element of a collection that satisfies a predicate condition.\r\n\t\t*/\r\n\t\tfind: function(collection, predicate) {\r\n\t\t\tlet result = null;\r\n\t\t\tcollection.forEach(x => {\r\n\t\t\t\tif (predicate(x)) {\r\n\t\t\t\t\tresult = x;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tCalls a callback with an error object.\r\n\t\t*/\r\n\t\terror: function(err, callback) {\r\n\t\t\tsetTimeout(x => { (callback || Core.nop)({error: err}); }, 1);\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tDoes nothing.\r\n\t\t*/\r\n\t\tnop: function() {}\r\n\t\t\r\n\t};\r\n\t\r\n\t/*\r\n\tAPI Listener - listens for new events (via messages) and handles them.\r\n\t*/\r\n\tvar Listener = function() {\r\n\t\t\r\n\t\tthis.ExternalHandlers = {\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tParameters:\r\n\t\t\t\t1. The user that joined\r\n\t\t\t\t2. The user that added them (undefined if they used a link? Should be checked)\r\n\t\t\t\t3. The chat the user was added to\r\n\t\t\t*/\r\n\t\t\tUSER_JOIN_GROUP: [],\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tParameters:\r\n\t\t\t\t1. The user that was removed\r\n\t\t\t\t2. The user that removed them (undefined if they used a link? Should be checked)\r\n\t\t\t\t3. The chat the user was removed from\r\n\t\t\t*/\r\n\t\t\tUSER_LEAVE_GROUP: [],\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tParameters:\r\n\t\t\t\t1. The group ID\r\n\t\t\t\t2. The user that changed the title\r\n\t\t\t\t3. The new title\r\n\t\t\t\t4. The subject type (should be 'subject')\r\n\t\t\t*/\r\n\t\t\tGROUP_SUBJECT_CHANGE: [],\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tParameters:\r\n\t\t\t\t1. Sender of the message\r\n\t\t\t\t2. Chat the message was sent at\r\n\t\t\t\t3. Parsed Msg object\r\n\t\t\t*/\r\n\t\t\tMESSAGE_RECEIVED: [],\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tParameters:\r\n\t\t\t\t1. The chat the message was sent to\r\n\t\t\t\t2. Parsed Msg object\r\n\t\t\t*/\r\n\t\t\tMESSAGE_SENT: []\r\n\t\t};\r\n\t\t\r\n\t\t/*\r\n\t\tHandlers for different message types\r\n\t\t*/\r\n\t\tvar handlers = [\r\n\t\t\t/*\r\n\t\t\tUser join / leave group.\r\n\t\t\t*/\r\n\t\t\t{\r\n\t\t\t\tpredicate: msg => msg.__x_isNotification && msg.__x_eventType == \"i\" && msg.__x_type == \"gp2\",\r\n\t\t\t\thandler: function(msg) {\r\n\t\t\t\t\tvar is_join = msg.__x_subtype == \"add\" || msg.__x_subtype == \"invite\";\r\n\t\t\t\t\tvar is_leave = msg.__x_subtype == \"leave\" || msg.__x_subtype == \"remove\";\r\n\t\t\t\t\tvar object = msg.__x_recipients[0];\r\n\t\t\t\t\tvar subject = msg.__x_sender;\r\n\t\t\t\t\tvar chat = msg.chat.__x_id;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (is_join) {\r\n\t\t\t\t\t\tAPI.listener.ExternalHandlers.USER_JOIN_GROUP.forEach(x => x(object, subject, chat));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (is_leave) {\r\n\t\t\t\t\t\tAPI.listener.ExternalHandlers.USER_LEAVE_GROUP.forEach(x => x(object, subject, chat));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t/*\r\n\t\t\tGroup subject change.\r\n\t\t\t*/\r\n\t\t\t{\r\n\t\t\t\tpredicate: msg => msg.__x_isNotification && msg.__x_eventType == \"n\",\r\n\t\t\t\thandler: function(msg) {\r\n\t\t\t\t\tvar chat = msg.__x_to;\r\n\t\t\t\t\tvar changer = msg.__x_sender;\r\n\t\t\t\t\tvar new_title = msg.__x_body;\r\n\t\t\t\t\tvar subtype = msg.__x_subtype;\r\n\t\t\t\t\tAPI.listener.ExternalHandlers.GROUP_SUBJECT_CHANGE.forEach(x => x(chat, changer, new_title, subtype));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t/*\r\n\t\t\tMessage received\r\n\t\t\t*/\r\n\t\t\t{\r\n\t\t\t\tpredicate: msg => msg.__x_isUserCreatedType && !msg.__x_isNotification && !msg.__x_isSentByMe,\r\n\t\t\t\thandler: function(msg) {\r\n\t\t\t\t\tvar sender = msg.__x_sender;\r\n\t\t\t\t\tvar chat = msg.__x_from;\r\n\t\t\t\t\tvar message = msg.__x_id._serialized;\r\n\t\t\t\t\tconsole.log(msg);\r\n\t\t\t\t\tAPI.listener.ExternalHandlers.MESSAGE_RECEIVED.forEach(x => x(sender, chat, API.parseMsgObject(msg)));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t/*\r\n\t\t\tMessage sent\r\n\t\t\t*/\r\n\t\t\t{\r\n\t\t\t\tpredicate: msg => msg.__x_isUserCreatedType && !msg.__x_isNotification && msg.__x_isSentByMe,\r\n\t\t\t\thandler: function(msg) {\r\n\t\t\t\t\tvar to = msg.__x_to;\r\n\t\t\t\t\tAPI.listener.ExternalHandlers.MESSAGE_SENT.forEach(x => x(to, API.parseMsgObject(msg), msg));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t];\r\n\t\t\r\n\t\t/*\r\n\t\tHandles a new incoming message\r\n\t\t*/\r\n\t\tvar handle_msg = function(msg) {\r\n\t\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\t\tif (handlers[i].predicate(msg)) {\r\n\t\t\t\t\thandlers[i].handler(msg);\r\n\t\t\t\t\tconsole.log(\"Firing handler \" + i);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconsole.log(\"No suitable handlers were found for \", msg);\r\n\t\t};\r\n\t\t\r\n\t\t/*\r\n\t\tGoes through messages and filters new ones out. Then calls handle_msg on the newly created ones.\r\n\t\t*/\r\n\t\tvar check_update = function() {\r\n\t\t\t\r\n\t\t\tif (window.Store) {\r\n\t\t\t\tStore.Msg.models.forEach(model => {\r\n\t\t\t\t\tif (model.__x_isNewMsg) {\r\n\t\t\t\t\t\tmodel.__x_isNewMsg = false;\r\n\t\t\t\t\t\thandle_msg(model);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twindow.makeStore();\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t/*\r\n\t\tClears previously created listeners and starts a new one.\r\n\t\t*/\r\n\t\tthis.listen = function() {\r\n\t\t\tif (window.API_LISTENER_TOKEN) {\r\n\t\t\t\tclearInterval(window.API_LISTENER_TOKEN);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twindow.API_LISTENER_TOKEN = setInterval(check_update, 10);\r\n\t\t};\r\n\t\t\r\n\t};\r\n\t\r\n\t/*\r\n\tThis is the API, which contains functions, literals, constants and utilities to integrate with WhatsApp Web version.\r\n\t*/\r\n\twindow.API = {\r\n\t\t\r\n\t\t/*\r\n\t\tException constants.\r\n\t\t*/\r\n\t\tError: {\r\n\t\t\tOK: true,\r\n\t\t\tUSER_NOT_FOUND: \"The specified user ID was not found\",\r\n\t\t\tCHAT_NOT_FOUND: \"The specified chat ID was not found\",\r\n\t\t\tGROUP_NOT_FOUND: \"The specified group metadata ID was not found\",\r\n\t\t\tUSER_NOT_IN_GROUP: \"The specified user is not a member of the required group\"\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tReturns the contact ID from a given phone number.\r\n\t\tOnly digits in the phone number. Example: \"972557267388\" and not \"(+972) 055-726-7388\"\r\n\t\t*/\r\n\t\tfindContactId: function(phone_number) {\r\n\t\t\tvar result = null;\r\n\t\t\tStore.Contact.models.forEach(x => {\r\n\t\t\t\tif (x.hasOwnProperty(\"__x_id\") && (x.__x_id.match(/\\d+/g) || []).join(\"\") == phone_number) {\r\n\t\t\t\t\tresult = x.__x_id;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result || null;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tReturns an array of chat ID's that correspond to chats with the parameter in the title.\r\n\t\tFor example, calling it with title='John' may return the ID's of the chats: 'John Smith', 'John from the cafeteria', and 'Johnna\\'s birthday party 2016'\r\n\t\t*/\r\n\t\tfindChatIds: function(title) {\r\n\t\t\tvar result = [];\r\n\t\t\tStore.Chat.models.forEach(x => {\r\n\t\t\t\tif (x.hasOwnProperty(\"__x_formattedTitle\") && ~(x.__x_formattedTitle.indexOf(title))) {\r\n\t\t\t\t\tresult.push(x.__x_id);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\tlistener: new Listener(),\r\n\t\t\r\n\t\t/*\r\n\t\tAdds a user to a group.\r\n\t\tParameters:\r\n\t\t\tuser_id - the ID of the user (NOT the phone number)\r\n\t\t\tgroup_id - the ID of the group\r\n\t\t\tcallback - to be invoked after the operation finishes\r\n\t\t*/\r\n\t\taddUserToGroup: function(user_id, group_id, callback) {\r\n\t\t\tvar group = Core.group(group_id);\r\n\t\t\tvar user = Core.contact(user_id);\r\n\t\t\t\r\n\t\t\tif (group == null) {\r\n\t\t\t\tCore.error(API.Error.GROUP_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (user == null) {\r\n\t\t\t\tCore.error(API.Error.USER_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgroup.participants.addParticipant(user).then(callback);\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tRemoves a user from a group.\r\n\t\tParameters:\r\n\t\t\tuser_id - the ID of the user (NOT the phone number)\r\n\t\t\tgroup_id - the ID of the group\r\n\t\t\tcallback - to be invoked after the operation finishes\r\n\t\t*/\r\n\t\tremoveUserFromGroup: function(user_id, group_id, callback) {\r\n\t\t\tvar group = Core.group(group_id);\r\n\t\t\tif (group == null) {\r\n\t\t\t\tCore.error(API.Error.GROUP_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar user = Core.find(group.participants, x => x.hasOwnProperty(\"__x_id\") && x.__x_id == user_id);\r\n\t\t\tif (user == null) {\r\n\t\t\t\tCore.error(API.Error.USER_NOT_IN_GROUP, callback || Core.nop);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgroup.participants.removeParticipant(user).then(callback);\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tSets a chat's archived status\r\n\t\tParameters:\r\n\t\t\tchat_id - the ID of the conversation\r\n\t\t\tarchive_status - true for archiving, false for unarchiving.\r\n\t\t\tcallback - to be invoked after the operation finishes\r\n\t\t*/\r\n\t\tsetChatArchiveStatus: function(chat_id, archive_status, callback) {\r\n\t\t\tvar chat = Core.chat(chat_id);\r\n\t\t\tif (chat == null) {\r\n\t\t\t\tCore.error(API.Error.CHAT_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchat.setArchive(!!archive_status).then(function() {\r\n\t\t\t\t(callback || Core.nop)({status: 200});\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tGets the archive status of a chat\r\n\t\tParameters:\r\n\t\t\tchat_id - the ID of the conversation\r\n\t\tReturn value:\r\n\t\t\tbool - true if archived, false if not archived.\r\n\t\t\tnull - if chat was not found\r\n\t\t*/\r\n\t\tgetChatArchiveStatus: function(chat_id) {\r\n\t\t\tvar chat = Core.chat(chat_id);\r\n\t\t\tif (chat == null) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn chat.archive;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tGets the invite link for a group.\r\n\t\tParameters:\r\n\t\t\tgroup_id - the ID of the group\r\n\t\tReturn value:\r\n\t\t\tstring - the invite link\r\n\t\t\tnull - if the group was not found\r\n\t\t*/\r\n\t\tgetGroupInviteLink: function(group_id) {\r\n\t\t\tvar group = Core.group(group_id);\r\n\t\t\tif (group == null) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn group.groupInviteLink;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tRevokes a group's invite link.\r\n\t\tParameters:\r\n\t\t\tgroup_id - the ID of the group\r\n\t\t\tcallback - to be invoked after the operation completes\r\n\t\t*/\r\n\t\trevokeGroupInviteLink: function(group_id, callback) {\r\n\t\t\tvar group = Core.group(group_id);\r\n\t\t\tif (group == null) {\r\n\t\t\t\tCore.error(Core.Error.GROUP_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgroup.revokeGroupInvite().then(function(e) {\r\n\t\t\t\t(callback || Core.nop)({status: e});\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tSets a user's blocked status\r\n\t\tParameters:\r\n\t\t\tuser_id - the ID of the user to block/unblock\r\n\t\t\tblocked_status - true - blocked, false - unblocked\r\n\t\t\tcallback - to be invoked after the operation completes\r\n\t\t*/\r\n\t\tsetBlockedStatus: function(user_id, blocked_status, callback) {\r\n\t\t\tvar user = Core.contact(user_id);\r\n\t\t\tif (user == null) {\r\n\t\t\t\tCore.error(API.Error.USER_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tuser.setBlock(blocked_status).then(function(e) {\r\n\t\t\t\t(callback || Core.nop)({status: e});\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tSends a text message in a given chat.\r\n\t\tParameters:\r\n\t\t\tchat_id - the chat to send a message to.\r\n\t\t\tmessage_text - the plain text of the message.\r\n\t\t\tcallback - to be invoked after the operation completes\r\n\t\t*/\r\n\t\tsendTextMessage: function(chat_id, message_text, callback) {\r\n\t\t\tvar chat = Core.chat(chat_id);\r\n\t\t\tif (chat == null) {\r\n\t\t\t\tCore.error(API.Error.CHAT_NOT_FOUND, callback)\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchat.sendMessage(message_text).then(function(e) {\r\n\t\t\t\t(callback || Core.nop)({status: e});\r\n\t\t\t});\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tCreates a new group.\r\n\t\tParameters:\r\n\t\t\tgroup_subject - the title of the newly created group\r\n\t\t\tparticipants - an array of ids of users to add to the group\r\n\t\t\tcallback - to be invoked after the operation completes\r\n\t\t\r\n\t\tNeeds further testing\r\n\t\t*/\r\n\t\tcreateGroup: function(group_subject, participants, callback) {\r\n\t\t\tvar p = [];\r\n\t\t\tfor (var x = 0; x < participants.length; x++)\r\n\t\t\t{\r\n\t\t\t\tp.push(Core.contact(participants[x]));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tStore.Chat.createGroup(group_subject, null, null, p, undefined).then(callback);\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tRetrieves contact info for a certain id\r\n\t\tParameters:\r\n\t\t\tuser_id - the id of the user to look for\r\n\t\tReturn value:\r\n\t\t\tobject - the details\r\n\t\t\tnull - if the user was not found\r\n\t\t*/\r\n\t\tgetContactInfo: function(user_id) {\r\n\t\t\tvar contact = Core.contact(user_id);\r\n\t\t\tif (contact == null || !contact[\"all\"]) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn contact.all;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tRetrieves message info for a certain id\r\n\t\tParameters:\r\n\t\t\tmessage_id - the id of the message to look for\r\n\t\tReturn value:\r\n\t\t\tobject - the details\r\n\t\t\tnull - if the message was not found in any chat\r\n\t\t*/\r\n\t\tgetMessageInfo: function(message_id) {\r\n\t\t\treturn Core.find(Store.Msg.models, x => x.__x_id._serialized == message_id);\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tReturns a list of all contact IDs.\r\n\t\tReturn Value:\r\n\t\t\tarray - the array of strings containing the IDs of the clients.\r\n\t\t*/\r\n\t\tgetContactList: function() {\r\n\t\t\tvar result = [];\r\n\t\t\tStore.Contact.models.forEach(x => { result.push(x.__x_id); });\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tSends contact(s) to a chat.\r\n\t\tParameters: \r\n\t\t\tchat_id - the ID of the chat to write the contacts to\r\n\t\t\tcontacts - the contact / array of contacts to send\r\n\t\t\tcallback - to be incoked after the operation completes\r\n\t\t\t\r\n\t\tNeeds further testing.\r\n\t\t*/\r\n\t\tsendContactMessage: function(chat_id, contacts, callback) {\r\n\t\t\tif (contacts.constructor != Array) {\r\n\t\t\t\tcontacts = [contacts];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar chat = Core.chat(chat_id);\r\n\t\t\tif (chat == null) {\r\n\t\t\t\tCore.error(API.Error.CHAT_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar toSend = [];\r\n\t\t\tcontacts.forEach(x => {\r\n\t\t\t\tvar c = Core.contact(x);\r\n\t\t\t\tif (c != null) {\r\n\t\t\t\t\ttoSend.push(c);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (!toSend.length) {\r\n\t\t\t\tCore.error(API.Error.USER_NOT_FOUND, callback);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (toSend.length == 1) {\r\n\t\t\t\tchat.sendContact(toSend[0]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchat.sendContactList(toSend);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t\tSend the other side \"<you> is typing...\"\r\n\t\t\tchat_id - the chat id\r\n\t\t*/\r\n\t\tsendTyping: function(chat_id) {\r\n\t\t\tvar chat = Core.chat(chat_id);\r\n\t\t\tif (chat == null) {\r\n\t\t\t\treturn API.Error.CHAT_NOT_FOUND;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchat.markComposing();\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t\tSend the other side \"<you> is recording audio...\"\r\n\t\t\tchat_id - the chat id\r\n\t\t*/\r\n\t\tsendRecording: function(chat_id) {\r\n\t\t\tvar chat = Core.chat(chat_id);\r\n\t\t\tif (chat == null) {\r\n\t\t\t\treturn API.Error.CHAT_NOT_FOUND;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchat.markRecording();\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\t\tHides the \"<you> is recording audio...\" to the other side\r\n\t\t\tchat_id - the chat id\r\n\t\t*/\r\n\t\tsendStopRecording: function(chat_id) {\r\n\t\t\tvar chat = Core.chat(chat_id);\r\n\t\t\tif (chat == null) {\r\n\t\t\t\treturn API.Error.CHAT_NOT_FOUND;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchat.markPaused();\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tInitializes a group (required to call before interacting with a group).\r\n\t\t*/\r\n\t\tinitGroup(group_id, callback) {\r\n\t\t\tvar group = Core.group(group_id);\r\n\t\t\tif (group == null) {\r\n\t\t\t\treturn API.Error.GROUP_NOT_FOUND;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgroup.update().then(callback);\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tMinimizes a message object to a JSON convertable object for sending over network (smaller size than a huge Msg object)\r\n\t\tParameters:\r\n\t\t\tmsg_object - the message object to convert to JSON compatible type\r\n\t\t*/\r\n\t\tparseMsgObject: function(msg_object) {\r\n\t\t\tvar m = msg_object.all;\r\n\t\t\tif (msg_object[\"__x__quotedMsgObj\"]) {\r\n\t\t\t\tm.quotedMsg = API.parseMsgObject(Core.msg(msg_object.__x__quotedMsgObj.__x_id._serialized));\r\n\t\t\t}\r\n\t\t\tm.chat = m.chat.all;\r\n\t\t\tdelete m.msgChunk;\r\n\t\t\treturn m;\r\n\t\t},\r\n\t\t\r\n\t\t/*\r\n\t\tInitializes the API and sets the window.Store object.\r\n\t\t*/\r\n\t\tinit: function() {\r\n\t\t\twindow.makeStore();\r\n\t\t\twindow.API.listener.listen();\r\n\t\t}\r\n\t};\t\t\r\n})();\r\n\r\nwindow.makeStore = function() {\r\n\tif (!window.Store) {\r\n\t\t(function() {\r\n\t\t\tfunction getStore(modules) {\r\n\t\t\t\tlet foundCount = 0;\r\n\t\t\t\tlet neededObjects = [\r\n\t\t\t\t\t{ id: \"Store\", conditions: (module) => (module.Chat && module.Msg) ? module : null },\r\n\t\t\t\t\t{ id: \"Wap\", conditions: (module) => (module.createGroup) ? module : null },\r\n\t\t\t\t\t{ id: \"MediaCollection\", conditions: (module) => (module.default && module.default.prototype && module.default.prototype.processFiles !== undefined) ? module.default : null },\r\n\t\t\t\t\t{ id: \"WapDelete\", conditions: (module) => (module.sendConversationDelete && module.sendConversationDelete.length == 2) ? module : null },\r\n\t\t\t\t\t{ id: \"Conn\", conditions: (module) => (module.default && module.default.ref && module.default.refTTL) ? module.default : null },\r\n\t\t\t\t\t{ id: \"WapQuery\", conditions: (module) => (module.queryExist) ? module : null },\r\n\t\t\t\t\t{ id: \"ProtoConstructor\", conditions: (module) => (module.prototype && module.prototype.constructor.toString().indexOf('binaryProtocol deprecated version') >= 0) ? module : null },\r\n\t\t\t\t\t{ id: \"UserConstructor\", conditions: (module) => (module.default && module.default.prototype && module.default.prototype.isServer && module.default.prototype.isUser) ? module.default : null }\r\n\t\t\t\t];\r\n\r\n\t\t\t\tfor (let idx in modules) {\r\n\t\t\t\t\tif ((typeof modules[idx] === \"object\") && (modules[idx] !== null)) {\r\n\t\t\t\t\t\tlet first = Object.values(modules[idx])[0];\r\n\t\t\t\t\t\tif ((typeof first === \"object\") && (first.exports)) {\r\n\t\t\t\t\t\t\tfor (let idx2 in modules[idx]) {\r\n\t\t\t\t\t\t\t\tlet module = modules(idx2);\r\n\t\t\t\t\t\t\t\tif (!module) {\r\n\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tneededObjects.forEach((needObj) => {\r\n\t\t\t\t\t\t\t\t\tif(!needObj.conditions || needObj.foundedModule) return;\r\n\t\t\t\t\t\t\t\t\tlet neededModule = needObj.conditions(module);\r\n\t\t\t\t\t\t\t\t\tif(neededModule !== null) {\r\n\t\t\t\t\t\t\t\t\t\tfoundCount++;\r\n\t\t\t\t\t\t\t\t\t\tneedObj.foundedModule = neededModule;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tif(foundCount == neededObjects.length) {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlet neededStore = neededObjects.find((needObj) => needObj.id === \"Store\");\r\n\t\t\t\t\t\t\twindow.Store = neededStore.foundedModule ? neededStore.foundedModule : {};\r\n\t\t\t\t\t\t\tneededObjects.splice(neededObjects.indexOf(neededStore), 1);\r\n\t\t\t\t\t\t\tneededObjects.forEach((needObj) => {\r\n\t\t\t\t\t\t\t\tif(needObj.foundedModule) {\r\n\t\t\t\t\t\t\t\t\twindow.Store[needObj.id] = needObj.foundedModule;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\treturn window.Store;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twebpackJsonp([], {'parasite': (x, y, z) => getStore(z)}, 'parasite');\r\n\t\t})();\r\n\t}\r\n}\r\n\r\nAPI.init();"],"names":[],"sourceRoot":""}